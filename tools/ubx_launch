#!/usr/bin/env luajit
-- -*- lua -*-

ubx = require("ubx")
bd = require("blockdiagram")
local utils = require("utils")
local ts = tostring

local function usage()
   local res, str = utils.preproc(
	    [=[
microblx function block model system launcher
usage: ubx_launch [OPTION] -c <model file>
  -b BLOCK		monitor BLOCK and shutdown when it becomes inactive
  -c FILE[,FILE2]	.usc or .json model file to launch
			if multiple models are given, these will be merged prior
			to launching.
  -ctype TYPE		type of the model file. Either ucs or json. If not specified,
			auto-detected from extension
  -nodename NAME	set nodename to NAME
  -nostart		instantiate and configure, but don't start
  -t SECONDS		run for SECONDS and then shutdown
  -validate		don't run, just validate configuration file
  -loglevel N		set global loglevel [0..7]
  -s			log to stderr (in addition to ubx_log)
  -webif [PORT]		create and start webinterface block.
			the optional port defaults to 8888.
  -check CHK1[,CHK2]    carry out additional validation
    available checks:
@   for k,v in pairs(checks) do
      $(k): $(v.desc)
@   end

  -werror		treat warnings as errors
  -version		print version and exit
  -h			display this help and exit
]=], {checks=bd._checks, pairs=pairs, table=table})
   assert(res, "failed to generate usage string")
   print(str)
end

local function isempty(s)
  return s == nil or s == ''
end

local opttab=utils.proc_args(arg)
local nodename
local model
local conf_file
local conf_type
local monitorblock
local checks
local loglevel
local use_stderr

if opttab['-version'] then
   print("microblx "..ubx.safe_tostr(ubx.version()))
   os.exit(0)
end

if #arg==1 or opttab['-h'] then
   usage(); os.exit(1)
end

if not (opttab['-c'] and opttab['-c'][1]) then
   print("no configuration file given (-c option)")
   os.exit(1)
else
   conf_file = opttab['-c'][1]
end

if opttab['-ctype'] then
    if not opttab['-ctype'][1] then
        print("-ctype option requires a type argument")
        os.exit(1)
    else
        conf_type = opttab['-ctype'][1]
    end
end

model = bd.load(conf_file, conf_type)
if (opttab['-b'] and opttab['-b'][1]) then
   monitorblock = opttab['-b'][1]
end

if not bd.is_system(model) then
   print(model)
   print("ubx_launch failed to load file "..ts(conf_file))
   os.exit(1)
end

if opttab['-nodename'] then
   if not opttab['-nodename'][1] then
      print("-nodename option requires a node name argument)")
      os.exit(1)
   else
      nodename = opttab['-nodename'][1]
   end
end

if opttab['-validate'] then
   model:validate(true)
   os.exit(1)
end

if opttab['-loglevel'] then
   if not opttab['-loglevel'][1] then
      print("-loglevel option requres a level argument")
      os.exit(1)
   else
      loglevel = tonumber(opttab['-loglevel'][1])
   end
end

if opttab['-s'] then use_stderr=true end

if opttab['-check'] then
   if not opttab['-check'][1] then
      print("-check option requires name argument)")
      os.exit(1)
   end
   checks = utils.split(opttab['-check'][1], ",")
end

print("using prefix "..ubx.get_prefix())

ni = model:launch{nodename=nodename,
		  verbose=true,
		  loglevel=loglevel,
		  use_stderr=use_stderr,
		  nostart=opttab['-nostart'],
		  checks=checks or nil,
		  werror=opttab['-werror'],
}

if opttab['-webif'] then
   local port = opttab['-webif'][1] or 8888
   print("starting up webinterface block (http://localhost:"..ts(port)..")")
   ubx.load_module(ni, "webif")
   local webif1=ubx.block_create(ni, "webif/webif", "webif1", { port=ts(port) })
   assert(ubx.block_init(webif1)==0)
   assert(ubx.block_start(webif1)==0)
end

if not opttab['-i'] then
   local duration = 0
   if opttab['-t'] then
      if not opttab['-t'][1] then
         print("no time given (-t option)")
         os.exit(1)
      else
         duration = tonumber(opttab['-t'][1])
      end
   end
   if (duration > 0) then
      ubx.clock_mono_sleep(duration)
   elseif not isempty(monitorblock) then
      ubx.clock_mono_sleep(1)
      local monblock = ni:block_get(monitorblock)
      while (monblock:get_block_state() == 'active') do
         ubx.clock_mono_sleep(1)
      end
   else
      while true do
         ubx.clock_mono_sleep(60)
      end
   end
   model:pulldown(ni)
end

